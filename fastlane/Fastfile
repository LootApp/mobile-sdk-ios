fastlane_require 'json'
fastlane_require 'zip'
fastlane_version "2.81.0"
default_platform :ios

REPOSITORY_NAME = "mobile-sdk-ios".freeze

platform :ios do

  desc "Release new version"
  lane :release do |options|
      target_version = options[:version]
      raise "The version is missed. Use `fastlane release version:{version_number}`.`" if target_version.nil?

      ensure_git_branch
      ensure_git_status_clean
      
      add_entries(version: target_version)

      # Commit and push 
      unless (`git status --porcelain`).empty?
          git_add
          git_commit(path: ".", message: "New release version bump") 

          # Create release tag
          push_to_git_remote
      end

      # Make sure export is empty 
      FileUtils.remove_dir("../export") unless !File.directory?("../export")
      Dir.mkdir "../export"
      
      # Zip the frameworks
      zip_frameworks
      
      # Collect the binaries
      framework_binaries = Dir["../export/*"].map { |entry| framework_binary = File.join(File.expand_path('..', __FILE__),entry)}
      
      raise "No binary found to upload #{framework_binary}" unless framework_binaries.any?

      set_github_release(
          repository_name: "LootApp/#{REPOSITORY_NAME}",
          api_token: ENV['GITHUB_API_TOKEN'],
          tag_name: target_version,
          upload_assets: framework_binaries,
          name: "",
          description: "",
          is_draft: true
      )
  end

  lane :merge_upstream do 
    result = sh("git remote")
    sh("git remote add upstream git@github.com:Jumio/mobile-sdk-ios.git") unless result.include? 'upstream'
    sh("git fetch upstream")
    sh("git checkout master")
    sh("git merge -X theirs upstream/master")
  end

  private_lane :add_entries do |options|
    target_version = options[:version]
    raise "The version is missed. Use `fastlane release version:{version_number}`.`" if target_version.nil?

    # Jumio
      insert_entry(
        file_path: "JumioCore.json",
        framework_name: "JumioCore",
        release_version: target_version
      )

      # Netverify
      insert_entry(
        file_path: "Netverify.json",
        framework_name: "Netverify",
        release_version: target_version
      )

      # Microblink
      insert_entry(
        file_path: "Microblink.json",
        framework_name: "Microblink",
        release_version: target_version
      )

      # Umoove
      insert_entry(
        file_path: "Umoove.json",
        framework_name: "Umoove",
        release_version: target_version
      )
  end

  private_lane :zip_frameworks do |options|
    # Jumio
      zip_file_helper(
        framework_name: 'JumioCore',
        framework_path: 'frameworks/JumioCore.framework',
      )

      # Netverify
      zip_file_helper(
        framework_name: 'Netverify',
        framework_path: 'frameworks/Netverify.framework',
      )

      # Microblink
      zip_file_helper(
        framework_name: 'Microblink',
        framework_path: 'frameworks/Microblink.framework',
      )

      # Umoove
      zip_file_helper(
        framework_name: 'Umoove',
        framework_path: 'frameworks/Umoove.framework',
      )
  end

  after_all do |lane|

  end

  error do |lane, exception|

  end

end
